import AntDesign from '@expo/vector-icons/AntDesign'
import { useRouter } from 'expo-router'
import React from 'react'
import { ScrollView, View } from 'react-native'

import ModalWarning from '@/components/ModalWarning'
import ThemedText from '@/components/UI/ThemedText'
import ThemeSwitch from '@/components/UI/ThemeSwitch'
import { MODE } from '@/constants/style'
import useAuth from '@/hooks/useAuth'
import useLanguage from '@/hooks/useLanguage'
import useModal from '@/hooks/useModal'
import useMode from '@/hooks/useMode'
import usePassPhrase from '@/hooks/usePassPhrase'
import useTheme from '@/hooks/useTheme'
import useWallets from '@/hooks/useWallets'
import { LANGUAGE_SUPPORT } from '@/types/language'
import WalletKit from '@/utils/walletKit'

import Item from './Components/Item'
import styles from './styles'

const SettingScreen = () => {
  const { text } = useTheme()
  const { mode, setMode } = useMode()
  const { translate, language, setLanguage } = useLanguage()
  const { setWallets } = useWallets()
  const { removeAllPassphrases } = usePassPhrase()
  const { openModal } = useModal()
  const { handleAuth } = useAuth()
  const router = useRouter()

  const onResetApp = async () => {
    const callback = async () => {
      try {
        const isAuth = await handleAuth()
        if (isAuth) {
          setWallets([])
          removeAllPassphrases()
          setMode(MODE.Dark)
          setLanguage(LANGUAGE_SUPPORT.VN)
          WalletKit.sessionDeleteAll()
          router.replace('/create-wallet')
        }
      } catch (error) {
        // Web version alert
        if (typeof window !== 'undefined') {
          window.alert('Error: An error occurred while resetting the app.')
        }
      }
    }
    openModal({
      showIconClose: false,
      maskClosable: false,

      content: <ModalWarning type='danger' onConfirm={callback} />,
    })
  }

  const handleShowWallet = async () => {
    router.push('/wallet')
  }

  const handleSwitchMode = () => {
    const newMode = mode === MODE.Dark ? MODE.Light : MODE.Dark
    setMode(newMode)
  }

  const switchLanguage = () => {
    const newLanguage = language === LANGUAGE_SUPPORT.VN ? LANGUAGE_SUPPORT.EN : LANGUAGE_SUPPORT.VN
    setLanguage(newLanguage)
  }

  const languageDisplay = () => {
    return language === LANGUAGE_SUPPORT.VN ? 'Tiếng Việt' : 'English'
  }

  const modeDisplay = () => {
    return mode === MODE.Dark ? translate('common.dark') : translate('common.light')
  }

  return (
    <View style={[styles.container, styles[`container${mode}`]]}>
      <ScrollView contentContainerStyle={styles.content}>
        <Item onPress={handleShowWallet} title={translate('setting.wallet')} iconLeft='wallet' iconRight='arrow-right' />
        <Item
          title={translate('setting.theme')}
          iconLeft='picture'
          iconRight={
            <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
              <ThemedText style={[styles.textSubTitle, { color: text.color }]}>{modeDisplay()}</ThemedText>
              <ThemeSwitch value={mode === MODE.Dark} onValueChange={handleSwitchMode} />
            </View>
          }
        />
        <Item
          onPress={switchLanguage}
          title={translate('setting.language')}
          iconLeft='global'
          iconRight={
            <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
              <ThemedText style={[styles.textSubTitle, { color: text.color }]}>{languageDisplay()}</ThemedText>
              <AntDesign name='arrow-right' size={16} color={text.color} />
            </View>
          }
        />

        <Item onPress={onResetApp} title={translate('setting.resetApp')} iconLeft='delete' iconRight='arrow-right' />
      </ScrollView>
    </View>
  )
}

export default SettingScreen
